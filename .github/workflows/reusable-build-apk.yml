name: "[Reusable] Build APK"

on:
    workflow_call:
        inputs:
            build-environment:
                type: string
                required: true
        outputs:
            build-artifact:
                description: "The artifact file name of the built APK"
                value: ${{ jobs.build-apk.outputs.build-artifact }}

jobs:
    build-apk:

        outputs:
            build-artifact: ${{ steps.set-build-artifact.outputs.artifact }}

        runs-on: ubuntu-latest

        environment: ${{ inputs.build-environment }}

        env:
            # VERSION_CODE: Unique version code using the sum of the current timestamp and run number.
            VERSION_CODE: "set in lower step"
            # VERSION_NAME: Version name derived from the GitHub ref name after the final /.
            VERSION_NAME: "set in lower step"
            # VERSION_SUFFIX: The build environment (e.g., dev, staging, internal).
            VERSION_SUFFIX: ${{ inputs.build-environment }}
            # VERSION_BUILD: A unique build identifier combining the run number and attempt.
            VERSION_BUILD: ${{ github.run_number }}.${{ github.run_attempt }}
            # The final output file name.
            FILE_NAME: "set in lower step"

        steps:
            -   name: Checkout
                uses: actions/checkout@v4
            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    java-version: 17
                    distribution: 'temurin'

            -   name: Compute version variables
                run: |
                    echo "VERSION_CODE=$(($(date +%s) / 1000 + ${{ github.run_number }}))" >> $GITHUB_ENV
                    echo "VERSION_NAME=$(echo '${{ github.ref_name }}' | awk -F'/' '{print $NF}')" >> $GITHUB_ENV

            -   name: Compute file name
                run: |
                    echo "FILE_NAME=${{ env.VERSION_NAME }}-${{ env.VERSION_SUFFIX }}+${{ env.VERSION_CODE }}.${{ env.VERSION_BUILD }}" >> $GITHUB_ENV

            -   name: Set up local.properties
                run: |
                    #!/bin/bash
                    chmod +x gradlew
                    echo "org.gradle.caching=true" >>gradle.properties
                    echo "org.gradle.jvmargs=-Xmx7g"
                    touch local.properties
                    echo "GITHUB_USERNAME=${{ secrets.GH_PACKAGE_NAME }}" >>  local.properties 
                    echo "GITHUB_TOKEN=${{ secrets.GH_PACKAGE_TOKEN }}" >>  local.properties 

            -   name: Write Google Services file
                env:
                    GOOGLE_SERVICES_FILE: ${{ secrets.GOOGLE_SERVICES_FILE}}
                run: echo $GOOGLE_SERVICES_FILE > id/src/google-services.json

            -   name: Create build properties
                run: |
                    #overwrite the existing file with an empty file
                    truncate -s 0 build-logic/build_properties.gradle.kts
                    #Write the build properties
                    cat <<EOF >>build-logic/build_properties.gradle.kts
                    extra.apply {
                        set("VERSION_CODE", $VERSION_CODE)
                        set("VERSION_NAME", "$VERSION_NAME")
                        set("VERSION_SUFFIX", "$VERSION_SUFFIX")
                        set("VERSION_BUILD", "$VERSION_BUILD")
                        set("DEBUGGABLE", ${{ vars.BUILD_IS_DEBUGGABLE }})
                        set("DB_ENCRYPTION", ${{ vars.DB_IS_ENCRYPTED }})
                    }
                    EOF

            -   name: Set up signing properties
                run: |
                    #!/bin/bash
                    echo "${{secrets.SIGNING_JKS_FILE}}" | base64 -di >android-signing-keystore.jks
                    #overwrite or crate the file with an empty file
                    truncate -s 0 build-logic/signing_info.gradle.kts
                    cat << EOF >> build-logic/signing_info.gradle.kts
                    extra.apply {
                        set("store_file", "\$rootDir/android-signing-keystore.jks")
                        set("store_password", "${{secrets.SIGNING_KEYSTORE_PASSWORD}}")
                        set("key_alias", "${{vars.SIGNING_KEY_ALIAS}}")
                        set("key_password", "${{secrets.SIGNING_KEY_PASSWORD}}")
                    }
                    EOF

            -   name: build dev apk
                if: ${{ inputs.build-environment == 'dev' }}
                run: |
                    ./gradlew id:packageDebugUniversalApk
                    mv id/build/outputs/apk_from_bundle/debug/id-debug-universal.apk $FILE_NAME.apk
                    echo "FILE_NAME=$FILE_NAME.apk" >> $GITHUB_ENV

            -   name: build staging apk
                if: ${{ inputs.build-environment == 'staging' }}
                run: |
                    ./gradlew id:packageStagingUniversalApk
                    mv id/build/outputs/apk_from_bundle/staging/id-staging-universal.apk $FILE_NAME.apk
                    echo "FILE_NAME=$FILE_NAME.apk" >> $GITHUB_ENV

            -   name: build internal apk
                if: ${{ inputs.build-environment == 'internal' }}
                run: |
                    ./gradlew id:bundleRelease
                    mv id/build/outputs/bundle/release/id-release.aab $FILE_NAME.aab
                    echo "FILE_NAME=$FILE_NAME.aab" >> $GITHUB_ENV

            -   name: Upload artifact
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ env.FILE_NAME }}
                    path: ${{ env.FILE_NAME }}

            -   name: Set build-artifact output
                id: set-build-artifact
                run: echo "artifact=${{ env.FILE_NAME }}" >> $GITHUB_OUTPUT
