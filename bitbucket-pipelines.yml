# This is a sample build configuration for Java (Gradle).
# Check our guides at https://confluence.atlassian.com/x/zd-5Mw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: circleci/android:api-29-ndk

setup: &setup
  step:
    name: "Set up project"
    caches:
      - gradle
    script: 
      - echo $ARTIFACTORY_PASSWORD
      - TEST=1
      - echo $TEST
      - echo "SIMPRINTS_ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME}" >> gradle.properties
      - echo "SIMPRINTS_ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD}" >> gradle.properties
      - echo "org.gradle.caching=true" >> gradle.properties
      - cat ci/ci_settings >> settings.gradle
      - echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties
      - cat gradle.properties 
      - cat local.properties
      
pipelines:
  default:       
    - parallel:
        - steps:
          - step: *setup
          - step:
              name: "Run clientapi unit tests"
              caches:
                - gradle
              script: 
                - echo $TEST
                - ./gradlew id:bundleDebugClasses && ./gradlew clientapi:testDebugUnitTest
              artifacts:
                - clientapi/build/reports/tests/testDebugUnitTest/*
        - steps: 
          - step: *setup
          - step:
              name: "Run id unit tests"
              caches:
                - gradle
              script: 
                - ./gradlew id:bundleDebugClasses && ./gradlew id:testDebugUnitTest
              artifacts:
                - id/build/reports/tests/testDebugUnitTest/*
        - steps: 
          - step: *setup      
          - step:
              name: "Run face unit tests"
              caches:
                - gradle
              script: 
                - ./gradlew id:bundleDebugClasses && ./gradlew face:testDebugUnitTest
              artifacts:
                - face/build/reports/tests/testDebugUnitTest/*
                          
        - steps: 
          - step: *setup  
          - step:
            name: "Run fingerprint unit tests"
            caches:
              - gradle
            script: 
              - ./gradlew id:bundleDebugClasses && ./gradlew fingerprint:testDebugUnitTest
            artifacts:
              - fingerprint/build/reports/tests/testDebugUnitTest/*
