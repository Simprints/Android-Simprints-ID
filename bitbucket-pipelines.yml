# Check our guides at https://confluence.atlassian.com/x/zd-5Mw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: alvrme/alpine-android:android-33-jdk17-v2023.03.08

clone:
    depth: full # SonarCloud scanner needs the full history to assign issues properly

definitions:
    caches:
        gradlewrapper: ~/.gradle/wrapper
    steps:

        ######################################################################
        # Run the Client API unit tests with coverage and upload report to
        # artifacts.
        ######################################################################
        -   step: &run-clientapi-unit-tests
                name: "Run Clientapi unit tests"
                max-time: 30
                size: 2x
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew clientapi:jacocoTestReport
                artifacts:
                    - clientapi/build/reports/**

        ######################################################################
        # Run the ID unit tests with coverage and upload report to artifacts.
        ######################################################################
        -   step: &run-id-unit-tests
                name: "Run Id unit tests"
                size: 2x
                max-time: 30
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew id:jacocoTestReport
                artifacts:
                    - id/build/reports/**

        ######################################################################
        # Run the infrastructure unit tests with coverage and upload report to
        # artifacts.
        ######################################################################
        -   step: &run-infra-unit-tests
                name: "Run the infrastructure unit tests"
                size: 2x
                max-time: 30
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew core:jacocoTestReport
                    - ./gradlew infraevents:jacocoTestReport
                    - ./gradlew infraeventsync:jacocoTestReport
                    - ./gradlew infraconfig:jacocoTestReport
                    - ./gradlew infraenrolmentrecords:jacocoTestReport
                    - ./gradlew infralogging:jacocoTestReport
                    - ./gradlew infra:auth-store:jacocoTestReport
                    - ./gradlew infra:auth-logic:jacocoTestReport
                    - ./gradlew infranetwork:jacocoTestReport
                    - ./gradlew infrarealm:jacocoTestReport
                    - ./gradlew infrarecentuseractivity:jacocoTestReport
                    - ./gradlew infrasecurity:jacocoTestReport
                    - ./gradlew infralicense:jacocoTestReport
                    - ./gradlew infraimages:jacocoTestReport
                    - ./gradlew infraresources:jacocoTestReport
                    - ./gradlew infrafacebiosdk:jacocoTestReport
                    - ./gradlew infrarocwrapper:jacocoTestReport
                artifacts:
                    - core/build/reports/**
                    - infraevents/build/reports/**
                    - infraeventsync/build/reports/**
                    - infraconfig/build/reports/**
                    - infraenrolmentrecords/build/reports/**
                    - infralogging/build/reports/**
                    - infra/auth-store/build/reports/**
                    - infra/auth-logic/build/reports/**
                    - infranetwork/build/reports/**
                    - infrarealm/build/reports/**
                    - infrarecentuseractivity/build/reports/**
                    - infrasecurity/build/reports/**
                    - infralicense/build/reports/**
                    - infraimages/build/reports/**
                    - infraresources/build/reports/**
                    - infrafacebiosdk/build/reports/**
                    - infrarocwrapper/build/reports/**

        ######################################################################
        # Run the feature unit tests with coverage and upload report to
        # artifacts.
        ######################################################################
        -   step: &run-feature-unit-tests
                name: "Run the feature unit tests"
                size: 2x
                max-time: 30
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew featuredashboard:jacocoTestReport
                    - ./gradlew featurealert:jacocoTestReport
                    - ./gradlew featureexitform:jacocoTestReport
                    - ./gradlew featureconsent:jacocoTestReport
                    - ./gradlew feature:login:jacocoTestReport
                    - ./gradlew feature:fetch-subject:jacocoTestReport
                    - ./gradlew feature:select-subject:jacocoTestReport
                artifacts:
                    - featuredashboard/build/reports/**
                    - featurealert/build/reports/**
                    - featureexitform/build/reports/**
                    - featureconsent/build/reports/**
                    - feature/login/build/reports/**
                    - feature/fetch-subject/build/reports/**
                    - feature/select-subject/build/reports/**

        ######################################################################
        # Run the Face unit tests with coverage and upload report to artifacts.
        ######################################################################
        -   step: &run-face-unit-tests
                name: "Run Face unit tests"
                size: 2x
                max-time: 30
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew face:jacocoTestReport
                artifacts:
                    - face/build/reports/**

        ######################################################################
        # Run the Fingerprint unit tests with coverage and upload report to
        # artifacts.
        ######################################################################
        -   step: &run-fingerprint-unit-tests
                name: "Run Fingerprint unit tests"
                max-time: 30
                size: 2x
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew fingerprint:controller:jacocoTestReport
                    - ./gradlew fingerprint:infra:matcher:jacocoTestReport
                    - ./gradlew fingerprint:scanner:jacocoTestReport


                artifacts:
                    - fingerprint/controller/build/reports/**
                    - fingerprint/infra/matcher/build/reports/**
                    - fingerprint/scanner/build/reports/**


        ######################################################################
        # Get all of the test and coverage reports from artifacts, upload
        # them to sonarcloud.io, and check that they pass the quality gateway.
        # Sonarcloud requires Java 11 for the analysis.
        ######################################################################
        -   step: &upload-sonar-scan-and-check-quality-gate
                max-time: 30
                size: 2x
                name: "Upload scan and check quality gateway"
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - ./gradlew sonar -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=3600

        ######################################################################
        # Build all of the test APKs for the different modules, then Download
        # the google bundle tool, and use it to create an universal
        # APK and upload it to artifacts.
        ######################################################################
        -   step: &build-and-sign-universal-apk
                name: "Build universal & test APKs"
                max-time: 30
                size: 2x
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    # Build ID Android Test APK
                    # - ./gradlew id:assembleDebugAndroidTest
                    # - mv id/build/outputs/apk/androidTest/debug/id-debug-androidTest.apk id-debug-androidTest.apk
                    # Build Client API Android Test APK
                    # - ./gradlew clientapi:assembleDebugAndroidTest
                    # - mv clientapi/build/outputs/apk/androidTest/debug/clientapi-debug-androidTest.apk clientapi-debug-androidTest.apk
                    # Build Fingerprint Android Test APK
                    # - ./gradlew fingerprint:assembleDebugAndroidTest
                    # - mv fingerprint/build/outputs/apk/androidTest/debug/fingerprint-debug-androidTest.apk fingerprint-debug-androidTest.apk
                    # Build Face Android Test APK
                    # - ./gradlew face:assembleDebugAndroidTest
                    # - mv face/build/outputs/apk/androidTest/debug/face-debug-androidTest.apk face-debug-androidTest.apk
                    # Build Universal APK
                    - ./gradlew packageDebugUniversalApk
                    - mv id/build/outputs/apk_from_bundle/debug/id-debug-universal.apk universal.apk
                artifacts:
                    - universal.apk
                    # - id-debug-androidTest.apk
                    # - clientapi-debug-androidTest.apk
                    # - fingerprint-debug-androidTest.apk
                    # - face-debug-androidTest.apk

        ######################################################################
        # Run All Android tests on Firebase test lab.
        ######################################################################
        -   step: &run-all-android-tests
                name: "Run android tests"
                max-time: 60
                image: google/cloud-sdk:slim
                script:
                    - bash ./ci/pipeline/setup_gcloud
                    - mv ./*.apk ./ci/firebasetestlab/
                    - cd ./ci/firebasetestlab/
                    - ./run_all_android_tests universal.apk id:id-debug-androidTest.apk fingerprint:fingerprint-debug-androidTest.apk face:face-debug-androidTest.apk
                artifacts:
                    - ci/pipeline/test-reports/**

        ######################################################################
        # Build a signed Staging bundle with the Playstore upload key, and
        # deploy it to Firebase Distribution (simprints-firebase-staging).
        # Also upload the bundle and the relevant output files to artifacts.
        #
        # Signing vars are only available on a deployment step.
        ######################################################################
        -   step: &sign-and-deploy-to-staging
                name: "Sign and deploy Staging build to Staging Environment"
                deployment: Staging
                max-time: 30
                size: 2x
                trigger: manual
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - bash ./ci/deployment/build_properties_setup
                    - echo $FIREBASE_DIST_CREDENTIALS > id/src/staging/serviceCredentialsFile.json
                    - ./gradlew packageStagingUniversalApk
                    - ./gradlew id:appDistributionUploadStaging
                artifacts:
                    - id/build/outputs/**

        ######################################################################
        # Build a signed Release bundle with the Playstore upload key, and
        # deploy it to the internal test track.
        #
        # The final step is to set the release tag automatically to the version name.
        #
        # Signing vars are only available on a deployment step.
        ######################################################################
        -   step: &sign-and-deploy-to-internal
                name: "Sign and deploy Release build to Internal Test Track"
                deployment: Internal
                max-time: 30
                size: 2x
                trigger: manual
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - bash ./ci/deployment/build_properties_setup
                    - bash ./ci/deployment/signing_properties_setup
                    - mkdir -p id/src/release
                    - echo $RELEASE_GOOGLE_SERVICES_FILE > id/src/release/google-services.json
                    - ./gradlew id:bundleRelease
                    - ./gradlew id:publishReleaseBundle
                    - bash ./ci/deployment/release_tag_setup

        ######################################################################
        # Promote the Internal track build to the Alpha Track
        #
        # Signing vars are only available on a deployment step.
        ######################################################################
        -   step: &promote-internal-to-alpha
                name: "Promote Internal Track to Alpha Track"
                deployment: Alpha
                max-time: 30
                size: 2x
                trigger: manual
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - bash ./ci/deployment/build_properties_setup
                    - bash ./ci/deployment/signing_properties_setup
                    - ./gradlew promoteArtifact --from-track internal --promote-track alpha

        ######################################################################
        # Promote the Alpha track build to the Production Track
        #
        # Signing vars are only available on a deployment step.
        ######################################################################
        -   step: &promote-alpha-to-production
                name: "Promote Alpha Track to Production Track"
                deployment: Production
                max-time: 30
                size: 2x
                trigger: manual
                caches:
                    - gradle
                    - gradlewrapper
                script:
                    - source ci/pipeline/setup
                    - bash ./ci/deployment/build_properties_setup
                    - bash ./ci/deployment/signing_properties_setup
                    - ./gradlew promoteArtifact --from-track alpha --promote-track production


        ######################################################################
        # Run renovate automated dependency update tool
        ######################################################################
        -   step: &update-dependencies
                name: "Update project dependencies"
                image: renovate/renovate
                max-time: 30
                script:
                    - bash ./ci/renovate/run_renovate

######################################################################
# Define the different pipelines flows as anchors.
######################################################################
flows:
    -   flow: &development_flow
            -   parallel:
                    -   step: *run-clientapi-unit-tests
                    -   step: *run-id-unit-tests
                    -   step: *run-face-unit-tests
                    -   step: *run-fingerprint-unit-tests
                    -   step: *run-infra-unit-tests
                    -   step: *run-feature-unit-tests
                    -   step: *build-and-sign-universal-apk
            -   step: *upload-sonar-scan-and-check-quality-gate
    -   flow: &release_flow
            -   parallel:
                    -   step: *run-clientapi-unit-tests
                    -   step: *run-id-unit-tests
                    -   step: *run-face-unit-tests
                    -   step: *run-fingerprint-unit-tests
                    -   step: *run-infra-unit-tests
                    -   step: *run-feature-unit-tests
                    -   step: *build-and-sign-universal-apk
            -   step: *upload-sonar-scan-and-check-quality-gate
            -   step: *sign-and-deploy-to-staging
            -   step: *sign-and-deploy-to-internal
            -   step: *promote-internal-to-alpha
            -   step: *promote-alpha-to-production
    -   flow: &ci-test # For CI testing purposes only
            -   step: *build-and-sign-universal-apk
            -   step: *run-all-android-tests
    -   flow: &update-dependencies-flow
            -   step: *update-dependencies


######################################################################
# Define the triggers that launch the pipeline.
######################################################################
pipelines:
    pull-requests:
        '**': *development_flow
        main: *development_flow
        release/*: *release_flow
    custom:
        ci-test-pipeline: *ci-test # For CI testing purposes only
        renovate: *update-dependencies-flow
