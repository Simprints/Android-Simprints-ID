[versions]
kotlin_version = "2.0.20"
kotlin_coroutine_version = "1.10.2"
ksp_version = "2.0.20-1.0.24"

android_gradlePlugin_version = "8.11.0"
androidx_version = "1.6.2"
androidx_core_version = "1.16.0"
androidx_app_compat_version = "1.7.1"
androidx_fragment_version = "1.8.8"
androidx_navigation_version = "2.9.1"
androidx_lifecycle_version = "2.9.1"
androidx_work_version = "2.10.2"
androidx_room_version = "2.7.2"
androidx_datastore_version = "1.1.7"
androidx_camerax_version = "1.4.2"
androidx_test_orchestrator_version = "1.5.1"
androidx_dex_version = "2.0.1"
androidx_constraint_version = "2.2.1"
androidx_coordinator_version = "1.3.0"
androidx_cardview_version = "1.0.0"
androidx_preferences_version = "1.2.1"
androidx_viewpager_version = "1.1.0"
androidx_security_version = "1.0.0"
androidx_annotation_version = "1.9.1"
androidx_arch_core_version = "2.2.0"
matertial_version = "1.12.0"

hilt_version = "2.56.2"
hilt_androidx_version = "1.2.0"

play_base_services_version = "18.7.0"
play_location_services_version = "21.3.0"
play_integrity_version = "1.4.0"
gsm_plugin_version = "4.4.3"
play_publisher_version = "3.12.1"
play_barcode_version = "18.3.1"

firebase_auth_version = "23.2.1"
firebase_storage_version = "21.0.2"
firebase_crashlytics_version = "19.4.4"
firebase_analytics_version = "22.5.0"
firebase_perf_version = "21.0.5"
firebase_crashlyticsPlugin_version = "3.0.4"
firebase_perfPlugin_version = "1.4.2"
firebase_distrtibutionPlugin_version = "5.0.0"

# [MS-483] Newer versions of Retrofit (>=2.10.0) don't support android apis <=25 beacuse of the internal Jackson library
retrofit_version = "3.0.0"
okttp_version = "4.12.0"
# Newer versions of Jackson don't support android apis <=25.Jackson shouldn't be updated as long as SID MIN supported APIs <=25
jackson_version = "2.13.4"
chuck_version = "4.1.0"

sqlCipher_version = "4.9.0"
fuzzywuzzy_version = "1.4.0"
rootbeer_version = "0.1.1"
commons_io_version = "2.19.0"
kronos_version = "0.0.1-alpha11"
# Protobuf version is tied to Firebase dependencies and must be checked for compatibility on each update
protobuf_version = "4.26.1"
circleImageView_version = "3.1.0"
kermit_version = "2.0.6"
zip4j_version = "2.11.5"

libsimprints_version = "2025.1.3"
simmatcher_version = "1.2.0"
roc_wrapper_version = "1.23.0"
roc_wrapper-v3_version = "3.1.0"
nec_version = "1.5.0"
secugen_version = "1.1.0"
simface = "2025.3.0"

junit_version = "4.13.2"
junit_ext_version = "1.2.1"
truth_version = "1.4.4"
livedata_testing_version = "1.3.0"
mockk_version = "1.14.4"
robolectric_version = "4.15.1"
espresso_version = "3.6.1"
espresso_accessibility_version = "4.1.1"
barista_version = "4.3.0"
uiAutomator_version = "2.3.0"
jacoco_version = "0.8.13"

sonar_plugin_version = "6.2.0.5505"
realm_version = "3.0.0"
protobuf_plugin_version = "0.9.5"
deps_graph_version = "0.8.0"
tink_version = "1.18.0"
desugar_jdk_libsVersion = "2.1.5"
[libraries]

#Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin_version" }
kotlin-coroutinesAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlin_coroutine_version" }
kotlin-coroutinesPlayServices = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-play-services", version.ref = "kotlin_coroutine_version" }

#AndroidX
androidX-core = { module = "androidx.core:core-ktx", version.ref = "androidx_core_version" }
androidX-multidex = { module = "androidx.multidex:multidex", version.ref = "androidx_dex_version" }
androidX-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx_app_compat_version" }
androidX-appcompat-resource = { module = "androidx.appcompat:appcompat-resources", version.ref = "androidx_app_compat_version" }
androidX-Room-core = { module = "androidx.room:room-runtime", version.ref = "androidx_room_version" }
androidX-Room-compiler = { module = "androidx.room:room-compiler", version.ref = "androidx_room_version" }
androidX-Room-ktx = { module = "androidx.room:room-ktx", version.ref = "androidx_room_version" }
#Lifecycle
androidX-lifecycle = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidx_lifecycle_version" }
androidX-lifecycle-scope = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx_lifecycle_version" }
androidX-lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "androidx_lifecycle_version" }

#UI
androidX-ui-constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidx_constraint_version" }
androidX-ui-coordinatorlayout = { module = "androidx.coordinatorlayout:coordinatorlayout", version.ref = "androidx_coordinator_version" }
androidX-ui-cardview = { module = "androidx.cardview:cardview", version.ref = "androidx_cardview_version" }
androidX-ui-fragment = { module = "androidx.fragment:fragment-ktx", version.ref = "androidx_fragment_version" }
androidX-ui-preference = { module = "androidx.preference:preference", version.ref = "androidx_preferences_version" }
androidX-ui-viewpager2 = { module = "androidx.viewpager2:viewpager2", version.ref = "androidx_viewpager_version" }
#security
androidX-security = { module = "androidx.security:security-crypto", version.ref = "androidx_security_version" }

#CameraX
androidX-cameraX-core = { module = "androidx.camera:camera-core", version.ref = "androidx_camerax_version" }
androidX-cameraX-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "androidx_camerax_version" }
androidX-cameraX-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "androidx_camerax_version" }
androidX-cameraX-view = { module = "androidx.camera:camera-view", version.ref = "androidx_camerax_version" }

#Navigation
androidX-navigation-fragment = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "androidx_navigation_version" }
androidX-navigation-ui = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "androidx_navigation_version" }

#Annotation
androidX-annotation-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx_annotation_version" }

#Support
support-material = { module = "com.google.android.material:material", version.ref = "matertial_version" }

#WorkManager
workManager-work = { module = "androidx.work:work-runtime-ktx", version.ref = "androidx_work_version" }

#PlayServices
playServices-base = { module = "com.google.android.gms:play-services-base", version.ref = "play_base_services_version" }
playServices-location = { module = "com.google.android.gms:play-services-location", version.ref = "play_location_services_version" }
playServices-integrity = { module = "com.google.android.play:integrity", version.ref = "play_integrity_version" }
playServices-barcode = { module = "com.google.android.gms:play-services-mlkit-barcode-scanning", version.ref = "play_barcode_version" }
desugar_jdk_libs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar_jdk_libsVersion" }

#Firebase
firebase-auth = { module = "com.google.firebase:firebase-auth", version.ref = "firebase_auth_version" }
firebase-storage = { module = "com.google.firebase:firebase-storage", version.ref = "firebase_storage_version" }
firebase-crashlytics = { module = "com.google.firebase:firebase-crashlytics", version.ref = "firebase_crashlytics_version" }
firebase-analytics = { module = "com.google.firebase:firebase-analytics", version.ref = "firebase_analytics_version" }
firebase-perf = { module = "com.google.firebase:firebase-perf", version.ref = "firebase_perf_version" }

#SqlCipher
sqlCipher-core = { module = "net.zetetic:sqlcipher-android", version.ref = "sqlCipher_version" }

#Realm
realm_base = { module = "io.realm.kotlin:library-base", version.ref = "realm_version" }

#Retrofit
retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit_version" }
retrofit-jackson = { module = "com.squareup.retrofit2:converter-jackson", version.ref = "retrofit_version" }
retrofit-converterScalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit_version" }
retrofit-logging = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okttp_version" }
retrofit-okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okttp_version" }

#Chuck
chuck-debug = { module = "com.github.chuckerteam.chucker:library", version.ref = "chuck_version" }
chuck-release = { module = "com.github.chuckerteam.chucker:library-no-op", version.ref = "chuck_version" }

#Jackson
jackson-core = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson_version" }

#Fuzzywuzzy
fuzzywuzzy-core = { module = "me.xdrop:fuzzywuzzy", version.ref = "fuzzywuzzy_version" }

#Rootbeer
rootbeer-core = { module = "com.scottyab:rootbeer-lib", version.ref = "rootbeer_version" }

#circleImageView
circleImageView = { module = "de.hdodenhof:circleimageview", version.ref = "circleImageView_version" }

#CommonsIO
commonsIO-commons_io = { module = "commons-io:commons-io", version.ref = "commons_io_version" }

#Logging
kermit = { module = "co.touchlab:kermit-android", version.ref = "kermit_version" }
kermit-io = { module = "co.touchlab:kermit-io", version.ref = "kermit_version" }
zip4j = { module = "net.lingala.zip4j:zip4j", version.ref = "zip4j_version" }

#Kronos
kronos-kronos = { module = "com.lyft.kronos:kronos-android", version.ref = "kronos_version" }
#libsimprints
libsimprints = { module = "com.simprints:libsimprints", version.ref = "libsimprints_version" }
#simmatcher
simmatcher = { module = "com.simprints:libsimmatcher", version.ref = "simmatcher_version" }

# roc v1 sdk hosted in https://github.com/Simprints/lib-roc-wrapper
roc-v1 = { module = "com.simprints:rocwrapper", version.ref = "roc_wrapper_version" }
# roc v3 sdk hosted in https://github.com/Simprints/lib-roc-wrapper-v3
roc-v3 = { module = "com.simprints:rocwrapper-v3", version.ref = "roc_wrapper-v3_version" }
# nec sdk hosted in https://github.com/Simprints/NEC-wrapper/
nec-wrapper = { module = " com.simprints:necwrapper", version.ref = "nec_version" }
nec-lib = { module = "com.nec:lib", version.ref = "nec_version" }
# secugen sdk hosted in https://github.com/Simprints/secugen-wrapper
secugen = { module = "com.simprints:secugenwrapper", version.ref = "secugen_version" }
simface = { module = "com.simprints.biometrics:simface", version.ref = "simface" }

#hilt
hilt = { module = "com.google.dagger:hilt-android", version.ref = "hilt_version" }
hilt-dagger-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt_version" }
hilt-compiler = { module = "androidx.hilt:hilt-compiler", version.ref = "hilt_androidx_version" }
hilt-work = { module = "androidx.hilt:hilt-work", version.ref = "hilt_androidx_version" }
testing-hilt = { module = "com.google.dagger:hilt-android-testing", version.ref = "hilt_version" }
testing-hilt-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt_version" }

#Datastore
datastore = { module = "androidx.datastore:datastore", version.ref = "androidx_datastore_version" }

#Protobuf
protobuf = { module = "com.google.protobuf:protobuf-javalite", version.ref = "protobuf_version" }

#Google TINK cryptography
tink-core = { module = "com.google.crypto.tink:tink-android", version.ref = "tink_version" }

#Testing
testing-junit = { module = "junit:junit", version.ref = "junit_version" }
testing-truth = { module = "com.google.truth:truth", version.ref = "truth_version" }
testing-work = { module = "androidx.work:work-testing", version.ref = "androidx_work_version" }
testing-retrofit = { module = "com.squareup.retrofit2:retrofit-mock", version.ref = "retrofit_version" }
testing-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okttp_version" }
testing-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin_coroutine_version" }
testing-live-data = { module = "com.jraska.livedata:testing-ktx", version.ref = "livedata_testing_version" }
testing-fragment = { module = "androidx.fragment:fragment-testing", version.ref = "androidx_fragment_version" }
testing-navigation = { module = "androidx.navigation:navigation-testing", version.ref = "androidx_navigation_version" }
#Testing-Robolectric
testing-Robolectric-core = { module = "org.robolectric:robolectric", version.ref = "robolectric_version" }
testing-Robolectric-annotation = { module = "org.robolectric:annotations", version.ref = "robolectric_version" }
#Testing-Mockk
testing-Mockk-core = { module = "io.mockk:mockk", version.ref = "mockk_version" }
testing-Mockk-android = { module = "io.mockk:mockk-android", version.ref = "mockk_version" }
#Testing-Espresso
testing-Espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso_version" }
testing-Espresso-contrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso_version" }
testing-Espresso-accessibility = { module = "com.google.android.apps.common.testing.accessibility.framework:accessibility-test-framework", version.ref = "espresso_accessibility_version" }
testing-Espresso-intents = { module = "androidx.test.espresso:espresso-intents", version.ref = "espresso_version" }
testing-Espresso-barista = { module = "com.adevinta.android:barista", version.ref = "barista_version" } #Used to grant permissions in AndroidTests
#Testing-AndroidX
testing-AndroidX-ext-junit = { module = "androidx.test.ext:junit", version.ref = "junit_ext_version" }
testing-AndroidX-core = { module = "androidx.arch.core:core-testing", version.ref = "androidx_arch_core_version" }
testing-AndroidX-orchestrator = { module = "androidx.test:orchestrator", version.ref = "androidx_test_orchestrator_version" }
testing-AndroidX-runner = { module = "androidx.test:runner", version.ref = "androidx_version" }
testing-AndroidX-room = { module = "androidx.room:room-testing", version.ref = "androidx_room_version" }
testing-AndroidX-uiAutomator = { module = "androidx.test.uiautomator:uiautomator", version.ref = "uiAutomator_version" }

# Dependencies of the included build-logic
plugin-gradle-android = { group = "com.android.tools.build", name = "gradle", version.ref = "android_gradlePlugin_version" }
plugin-gradle-kotlin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin_version" }
plugin-gms = { group = "com.google.gms", name = "google-services", version.ref = "gsm_plugin_version" }
plugin-firebase-crashlytics = { group = "com.google.firebase", name = "firebase-crashlytics-gradle", version.ref = "firebase_crashlyticsPlugin_version" }
plugin-firebase-perf = { group = "com.google.firebase", name = "perf-plugin", version.ref = "firebase_perfPlugin_version" }
plugin-hilt = { group = "com.google.dagger", name = "hilt-android-gradle-plugin", version.ref = "hilt_version" }
plugin-protobuf = { group = "com.google.protobuf", name = "protobuf-gradle-plugin", version.ref = "protobuf_plugin_version" }
plugin-navigation = { group = "androidx.navigation", name = "navigation-safe-args-gradle-plugin", version.ref = "androidx_navigation_version" }
plugin-play-publisher = { group = "com.github.triplet.gradle", name = "play-publisher", version.ref = "play_publisher_version" }
plugin-sonar = { group = "org.sonarsource.scanner.gradle", name = "sonarqube-gradle-plugin", version.ref = "sonar_plugin_version" }
plugin-jacoco = { group = "org.jacoco", name = "org.jacoco.core", version.ref = "jacoco_version" }
plugin-room = { group = "androidx.room", name = "room-gradle-plugin", version.ref = "androidx_room_version" }

[plugins]

android-application = { id = "com.android.application", version.ref = "android_gradlePlugin_version" }
android-library = { id = "com.android.library", version.ref = "android_gradlePlugin_version" }
android-test = { id = "com.android.test", version.ref = "android_gradlePlugin_version" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin_version" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp_version" }
gms = { id = "com.google.gms.google-services", version.ref = "gsm_plugin_version" }
firebase-perf = { id = "com.google.firebase.firebase-perf", version.ref = "firebase_perfPlugin_version" }
firebase-crashlytics = { id = "com.google.firebase.crashlytics", version.ref = "firebase_crashlyticsPlugin_version" }
realm = { id = "io.realm.kotlin", version.ref = "realm_version" }
protobuf = { id = "com.google.protobuf", version.ref = "protobuf_plugin_version" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt_version" }
navigation-args = { id = "androidx.navigation.safeargs.kotlin", version.ref = "androidx_navigation_version" }
play-publisher = { id = "com.github.triplet.play", version.ref = "play_publisher_version" }
sonar = { id = "org.sonarqube", version.ref = "sonar_plugin_version" }
depsGraph = { id = "com.vanniktech.dependency.graph.generator", version.ref = "deps_graph_version" }
room = { id = "androidx.room", version.ref = "androidx_room_version" }
