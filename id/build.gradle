apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "io.fabric"
apply plugin: "com.google.firebase.firebase-crash"
apply plugin: "realm-android"

def getDevProjectId = { ->
    if (project.hasProperty('development_gcp_project')) {
        return development_gcp_project
    } else {
        return "simprints-dev"
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        multiDexEnabled true
        versionCode 56
        versionName "2017.4.2"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            versionNameSuffix "-dev"
            buildConfigField("String", "FIREBASE_PROJECT", "\"${getDevProjectId()}\"")
        }
        release {
            lintOptions {
                // TODO : Remove whenever possible
                // Check in the Translations Editor for crucial translations that may be missing
                disable "MissingTranslation"
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

        }
        endToEndTesting {
            initWith debug

            buildConfigField("String", "SCANNER", getLocalPropertyForTesting('ext.scanner'))
            buildConfigField("String", "WIFI_NETWORK", getLocalPropertyForTesting('ext.wifiNetwork'))
            buildConfigField("String", "WIFI_PASSWORD", getLocalPropertyForTesting('ext.wifiPassword'))
            versionNameSuffix "-test"
            buildConfigField("String", "FIREBASE_PROJECT", "\"simprints-testing\"")
            testCoverageEnabled true
        }
    }

    testBuildType "endToEndTesting"
}


project.afterEvaluate {
    project.("connectedEndToEndTestingAndroidTest").doFirst {
        def originalProvider = deviceProvider
        deviceProvider = [
            getName       : { originalProvider.getName() },
            init          : { originalProvider.init() },
            terminate     : { originalProvider.terminate() },
            getDevices    : { filterDevices(originalProvider.getDevices()) },
            getTimeoutInMs: { originalProvider.getTimeoutInMs() },
            isConfigured  : { originalProvider.isConfigured() },
            getMaxThreads : { originalProvider.getMaxThreads() }
        ] as com.android.builder.testing.api.DeviceProvider
    }

    project.("kaptEndToEndTestingKotlin").doFirst {
        ["ext.scanner", "ext.wifiNetwork", "ext.wifiNetwork"].each { paramName ->
            if (getLocalPropertyForTesting(paramName) == "") {
                throw new GradleException(
                    paramName + " not found and it's required to run the instrumented tests. Please add " + paramName + " in your local.properties file.")
            }
        }
    }
}

// Required to run instrumented tests (gradlew connectedAndroidTest) on a single device.
// By default Android runs on all device at the same time
def filterDevices(connectedDevices) {
    def DEVICES_PROPERTY = "devices"
    def devices = connectedDevices
    if (project.hasProperty(DEVICES_PROPERTY)) {
        def devicesSerials = project.getProperties().get(DEVICES_PROPERTY).split(/,/)
        devices = connectedDevices.findAll { devicesSerials.contains(it.serialNumber) }
        println "[testy] ${!devices.empty ? "Execute on: ${devices.collect { it.serialNumber }}" : "Devices not found"}"
    }

    devices
}

def getLocalPropertyForTesting(name) {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def externalModuleDir = properties.getProperty(name, "")
    return externalModuleDir
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {

    }
}

repositories {
    mavenCentral()
    maven { url "https://maven.google.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://maven.fabric.io/public" }
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}


dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation project(":libdata")
    implementation project(":libcommon")
    implementation project(":libsimprints")

    // Kotlin awesomeness
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"

    // Support libraries
    implementation "com.android.support:multidex:1.0.2"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:support-v4:$support_version"


    // Google
    implementation "com.google.android.gms:play-services-location:$google_version"
    implementation "com.google.guava:guava:23.6-android"

    // Databases
    implementation "com.michaelpardo:activeandroid:$active_android_version"
    implementation "com.google.firebase:firebase-core:$google_version"
    implementation "com.google.firebase:firebase-database:$google_version"
    implementation "com.google.firebase:firebase-storage:$google_version"
    implementation "com.google.firebase:firebase-auth:$google_version"
    implementation "com.google.firebase:firebase-config:$google_version"

    // Analytics
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
        transitive = true
    }
    implementation("com.crashlytics.sdk.android:crashlytics-ndk:$crashlytics_ndk_version@aar") {
        transitive = true
    }

    // Network
    implementation "com.android.volley:volley:$volley_version"
    implementation "com.google.code.gson:gson:2.8.2"

    // Logging
    implementation "com.jakewharton.timber:timber:4.6.0"

    // Reactive
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // Simprints
    implementation "com.simprints:libscanner:1.3.1"
    implementation "com.simprints:libmatcher:1.3.2"

    // Test
    // TODO: migrate to JUnit 5. Tried https://github.com/mannodermaus/android-junit5 on 03/12/17 and it did not work out of the box.
    testImplementation("junit:junit:$junit_version") {
        exclude group: "com.android.support"
    }
    testImplementation 'org.robolectric:robolectric:3.6.1'
    testImplementation "org.robolectric:shadows-multidex:3.6.1"

    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"

    // Android test
    androidTestImplementation "org.mockito:mockito-core:2.8.9"
    androidTestImplementation("com.schibsted.spain:barista:1.7.0") {
        exclude group: "com.android.support"
        exclude group: 'com.google.code.findbugs'
    }

    androidTestImplementation "com.simprints:cerberus-library:2018.1.1-dev-1"
    androidTestImplementation "com.simprints:remote-admin-client:2017.4.0-dev-5"
    androidTestImplementation "com.squareup.okhttp:okhttp:2.7.5"
    androidTestImplementation "joda-time:joda-time:2.9.9"
}

crashlytics {
    enableNdk true
    androidNdkOut "src/main/obj"
    androidNdkLibsOut "src/main/libs"
}

task copyDevGoogleServicesJson(type: Copy) {
    def jsonName = "${getDevProjectId()}-google-services.json"
    from "${project.rootDir}/id/src/debug/googleServicesJsons/${jsonName}"
    into "${project.rootDir}/id/src/debug/"
    rename { filename -> "google-services.json" }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'preDebugBuild') {
        preDebugBuild.dependsOn(copyDevGoogleServicesJson)
    }
}

apply plugin: "com.google.gms.google-services"
