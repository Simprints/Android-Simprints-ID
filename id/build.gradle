apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "io.fabric"
apply plugin: "com.google.firebase.firebase-crash"
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: "realm-android"


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 135
        versionName "2018.4.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    bundle {
        language {
            enableSplit = false
        }
    }
    
    buildTypes {
        release {
            lintOptions {
                // TODO : Remove whenever possible
                // Check in the Translations Editor for crucial translations that may be missing
                disable "MissingTranslation"
                abortOnError true
                fatal 'StopShip'
                checkReleaseBuilds true
            }
            minifyEnabled true
            ext.enableCrashlytics = true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [firebase_performance_logcat_enabled: false, firebase_analytics_collection_enabled: true]
        }
        releaseWithLogfile {
            initWith release
        }
        debug {
            minifyEnabled false
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            versionNameSuffix "-dev"
            manifestPlaceholders = [firebase_performance_logcat_enabled: true, firebase_analytics_collection_enabled: true]
        }
    }
    
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release" ||
            variant.buildType.name == "releaseWithLogfile") {

            buildConfigField("String", "GCP_PROJECT", "\"simprints-152315\"")
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyDdGdHCjfLY6z3zZSBrSHvjvNjh6K6Dhmw\"")
            buildConfigField("String", "END_POINT", "\"prod\"")
        } else if (variant.buildType.name == "debug") {
            buildConfigField("String", "GCP_PROJECT", "\"${getDevProjectId()}\"")
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyCxPFr61OtOyAsVoXKSSSBo-C4Jk1QHc7I\"")
            buildConfigField("String", "END_POINT", "\"dev\"")
        }
    }

    testBuildType "debug"

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

def getDevProjectId() {
    if (project.hasProperty("development_gcp_project")) {
        return development_gcp_project
    } else {
        return "simprints-dev"
    }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://maven.google.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://maven.fabric.io/public" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    maven {
        url "http://178.62.61.39:8081/artifactory/libs-release-local"
        credentials {
            username = "${SIMPRINTS_ARTIFACTORY_USERNAME}"
            password = "${SIMPRINTS_ARTIFACTORY_PASSWORD}"
        }
    }
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':libcommon')
    implementation project(':libsimprints')

    // Dagger
    implementation deps.dagger.android
    annotationProcessor deps.dagger.android_support
    kapt deps.dagger.core
    kaptAndroidTest deps.dagger.compiler
    kaptTest deps.dagger.compiler

    //compileOnly "org.glassfish:javax.annotation:10.0-b28"

    // Kotlin awesomeness
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.reflect
    implementation deps.kotlin.anko

    implementation deps.androidx.core

    // Support libraries
    implementation deps.androidx.multidex
    implementation deps.androidx.appcompat
    implementation deps.support.material
    implementation deps.androidx.legacy
    implementation deps.androidx.ui.constraintlayout

    // WorkManager
    implementation(deps.arch_components.work) {
        exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    // Google
    implementation deps.playservices.location
    implementation deps.playservices.places
    implementation deps.playservices.safetynet

    // Databases
    implementation deps.firebase.database
    implementation deps.firebase.firestore

    //Room
    implementation deps.androidx.room.core
    kapt deps.androidx.room.compiler

    //Lifecycle
    implementation deps.androidx.lifecycle.viewmodel
    implementation  deps.androidx.lifecycle.livedata
    kapt  deps.androidx.lifecycle.compiler

    // Firebase
    implementation deps.firebase.core
    implementation deps.firebase.auth
    implementation deps.firebase.config
    implementation deps.firebase.perf
    implementation deps.firebase.storage

    // Analytics
    implementation(deps.crashlytics.core) {
        transitive = true
    }
    implementation(deps.crashlytics.ndk) {
        transitive = true
    }

    // Network
    implementation deps.retrofit.core
    implementation deps.retrofit.adapter
    implementation deps.retrofit.convertergson
    testImplementation deps.testing.retrofit
    androidTestImplementation deps.testing.retrofit
    implementation deps.retrofit.logging
    implementation deps.retrofit.okhttp

    // Network - Gson
    implementation deps.gson.core

    // Logging
    implementation deps.timber.core

    // Reactive
    implementation deps.rxjava2.android
    implementation deps.rxjava2.core
    implementation deps.rxjava2.kotlin

    // Simprints
    implementation deps.simprints.libscanner
    implementation deps.simprints.libmatcher

    // Test

    // TODO: migrate to JUnit 5. Tried https://github.com/mannodermaus/android-junit5 on 03/12/17 and it did not work out of the box.
    testImplementation(deps.testing.junit) {
        exclude group: "com.android.support"
    }
    testImplementation deps.testing.robolectric.core
    testImplementation deps.testing.robolectric.multidex

    testImplementation deps.testing.androidx.monitor
    testImplementation deps.testing.androidx.ext_junit
    testImplementation deps.testing.androidx.core
    testImplementation deps.testing.androidx.core_testing
    androidTestImplementation deps.testing.androidx.core_testing

    //implementation "org.checkerframework:checker-compat-qual:2.5.3"
    testImplementation deps.testing.truth
    androidTestImplementation(deps.testing.truth){
        exclude group: "com.google.guava"
        exclude group: "com.google.errorprone"
    }

    testImplementation deps.testing.mockito.core
    testImplementation deps.testing.mockito.inline
    testImplementation deps.testing.mockwebserver

    // 3.10 hangs around with roboeletric
    testImplementation deps.testing.mockito.kotlin
    androidTestImplementation deps.testing.mockito.kotlin

    // Android test - https://developer.android.com/training/testing/release-notes
    androidTestImplementation deps.testing.mockito.core
    androidTestImplementation deps.testing.mockito.android

    androidTestImplementation deps.testing.androidx.monitor
    androidTestImplementation deps.testing.androidx.core
    androidTestImplementation deps.testing.androidx.ext_junit
    androidTestImplementation deps.testing.androidx.runner
    testImplementation deps.testing.androidx.runner
    androidTestImplementation deps.testing.androidx.rules

    androidTestImplementation deps.testing.espresso.core
    androidTestImplementation deps.testing.espresso.intents


    androidTestImplementation(deps.testing.espresso.barista) {
        exclude group: "com.android.support"
        exclude group: "com.google.code.findbugs"
        exclude group: "org.jetbrains.kotlin"
        exclude group: "com.google.guava"
    }

    androidTestImplementation "com.simprints:mockscanner:2018.3.0"
    testImplementation "com.simprints:mockscanner:2018.3.0"
    androidTestImplementation 'joda-time:joda-time:2.9.9'

    //UI
    implementation 'com.github.michael-rapp:android-material-dialog:4.3.3'
    implementation "androidx.cardview:cardview:$androidx_version"
    implementation "androidx.preference:preference:$androidx_version"
    implementation "androidx.fragment:fragment:$androidx_version"

    //Inject in tests
    testImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
    testImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'

    //Permissions & Locations
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'

    //Room
    testImplementation "androidx.room:room-testing:$room_version"

    //WorkManager
    androidTestImplementation "android.arch.work:work-testing:$work_version"
    testImplementation "android.arch.work:work-testing:$work_version"

}

def copyGoogleServicesJsonTask(variantName, gcpProject) {
    return tasks.create("copyGoogleServicesJson${variantName.capitalize()}", Copy) {
        def jsonName = "${gcpProject}-google-services.json".replaceAll("-", "_")
        from "${project.rootDir}/id/src/${variantName}/res/raw/${jsonName}"
        into "${project.rootDir}/id/src/${variantName}/"
        rename { filename -> "google-services.json" }
    }
}

copyGoogleServicesJsonTask("debug", getDevProjectId())
copyGoogleServicesJsonTask("release", "simprints-152315")
copyGoogleServicesJsonTask("releaseWithLogfile", "simprints-152315")
copyGoogleServicesJsonTask("endToEndTesting", "simprints-testing")

crashlytics {
    enableNdk true
    androidNdkOut "src/main/obj"
    androidNdkLibsOut "src/main/libs"
}

apply plugin: "com.google.gms.google-services"
