apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin-android-extensions'

//Required to import Realm manually (no plugin)
import io.realm.transformer.RealmTransformer

android.registerTransform(new RealmTransformer())

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        versionCode 151
        versionName "2019.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    buildTypes {
        release {
            lintOptions {
                // TODO : Remove whenever possible
                // Check in the Translations Editor for crucial translations that may be missing
                disable "MissingTranslation"
                abortOnError true
                fatal 'StopShip'
                checkReleaseBuilds true
            }
            minifyEnabled true
            ext.enableCrashlytics = true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [firebase_performance_logcat_enabled: false, firebase_analytics_collection_enabled: true]
        }
        releaseWithLogfile {
            initWith release
        }
        debug {
            minifyEnabled false
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            versionNameSuffix "-dev"
            manifestPlaceholders = [firebase_performance_logcat_enabled: true, firebase_analytics_collection_enabled: true]
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release" ||
                variant.buildType.name == "releaseWithLogfile") {

            buildConfigField("String", "GCP_PROJECT", "\"simprints-152315\"")
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyDdGdHCjfLY6z3zZSBrSHvjvNjh6K6Dhmw\"")
            buildConfigField("String", "END_POINT", "\"prod\"")
        } else if (variant.buildType.name == "debug") {
            buildConfigField("String", "GCP_PROJECT", "\"${getDevProjectId()}\"")
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyCxPFr61OtOyAsVoXKSSSBo-C4Jk1QHc7I\"")
            buildConfigField("String", "END_POINT", "\"dev\"")
        }
    }

    testBuildType "debug"

    sourceSets {
        String sharedTestDir = 'src/commontesttools/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    // Required for deps that use Java 8 (okhttp)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dynamicFeatures = [":fingerprints", ":faces"]


}

def getDevProjectId() {
    if (project.hasProperty("development_gcp_project")) {
        return development_gcp_project
    } else {
        return "simprints-dev"
    }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://maven.google.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://maven.fabric.io/public" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    maven {
        url "http://178.62.61.39:8081/artifactory/libs-release-local"
        credentials {
            username = "${SIMPRINTS_ARTIFACTORY_USERNAME}"
            password = "${SIMPRINTS_ARTIFACTORY_PASSWORD}"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':libcommon')
    api project(':libsimprints')
    api project(':clientapi')
    api project(':core')
    api deps.simprints.libscanner
    api deps.simprints.libmatcher

    implementation deps.dagger.core
    implementation deps.kotlin.reflect
    implementation deps.kotlin.anko
    implementation deps.androidx.core
    implementation deps.androidx.multidex
    implementation deps.androidx.appcompat
    implementation deps.androidx.legacy
    implementation deps.androidx.room.core
    implementation deps.androidx.lifecycle.viewmodel
    implementation deps.androidx.lifecycle.livedata
    implementation deps.androidx.ui.constraintlayout
    implementation deps.androidx.ui.cardview
    implementation deps.androidx.ui.preference
    implementation deps.androidx.ui.fragment
    implementation deps.rxjava2.permissions
    implementation deps.rxjava2.location
    implementation deps.support.material
    implementation deps.arch_components.work
    implementation deps.playservices.location
    implementation deps.playservices.places
    implementation deps.playservices.safetynet
    api deps.firebase.database
    api deps.firebase.core
    api deps.firebase.auth
    api deps.firebase.config
    api deps.firebase.perf
    api deps.firebase.storage
    implementation(deps.crashlytics.core) {
        transitive = true
    }
    implementation(deps.crashlytics.ndk) {
        transitive = true
    }
    implementation deps.retrofit.core
    implementation deps.retrofit.adapter
    implementation deps.retrofit.convertergson
    implementation deps.retrofit.logging
    implementation deps.retrofit.okhttp
    api deps.gson.core
    implementation deps.timber.core
    implementation deps.rxjava2.android
    implementation deps.rxjava2.core
    implementation deps.rxjava2.kotlin
    kapt deps.androidx.lifecycle.compiler
    kapt deps.androidx.room.compiler
    kapt deps.dagger.compiler

    implementation deps.realm.annotations
    implementation(deps.realm.kotlin) {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk7'
    }
    implementation deps.realm.android
    kapt deps.realm.annotations_processor
    compileOnly deps.realm.glassfish_annotation

    // Test
    testImplementation deps.simprints.mockscanner
    testImplementation deps.testing.retrofit
    testImplementation(deps.testing.junit) {
        exclude group: "com.android.support"
    }
    testImplementation deps.testing.robolectric.core
    testImplementation deps.testing.robolectric.multidex
    testImplementation deps.testing.androidx.ext_junit
    testImplementation deps.testing.androidx.core
    testImplementation deps.testing.androidx.core_testing
    testImplementation deps.testing.androidx.runner
    testImplementation deps.testing.androidx.room
    testImplementation deps.testing.truth
    testImplementation deps.testing.mockito.inline
    testImplementation deps.testing.mockito.kotlin
    testImplementation deps.testing.mockwebserver
    testImplementation deps.testing.work
    kaptTest deps.dagger.compiler
    testImplementation project(':testtools')

    // Android test
    androidTestImplementation deps.simprints.mockscanner
    androidTestImplementation deps.testing.mockito.core
    androidTestImplementation deps.testing.mockito.android
    androidTestImplementation deps.testing.mockito.kotlin
    androidTestImplementation deps.testing.retrofit
    androidTestImplementation deps.testing.androidx.core_testing
    androidTestImplementation deps.testing.androidx.monitor
    androidTestImplementation deps.testing.androidx.core
    androidTestImplementation deps.testing.androidx.ext_junit
    androidTestImplementation deps.testing.androidx.runner
    androidTestImplementation deps.testing.androidx.rules
    androidTestImplementation deps.testing.work
    androidTestImplementation deps.testing.espresso.core
    androidTestImplementation deps.testing.espresso.intents
    androidTestImplementation deps.testing.truth
    androidTestImplementation(deps.testing.espresso.barista) {
        exclude group: "com.android.support"
        exclude group: "com.google.code.findbugs"
        exclude group: "org.jetbrains.kotlin"
        exclude group: "com.google.guava"
    }
    kaptAndroidTest deps.dagger.compiler
    androidTestImplementation(project(':testtools')) {
        exclude group: 'org.apache.maven'
        exclude group: 'org.mockito'
        exclude group: 'org.robolectric'
    }
}

def copyGoogleServicesJsonTask(variantName, gcpProject) {
    return tasks.create("copyGoogleServicesJson${variantName.capitalize()}", Copy) {
        def jsonName = "${gcpProject}-google-services.json".replaceAll("-", "_")
        from "${project.rootDir}/id/src/${variantName}/res/raw/${jsonName}"
        into "${project.rootDir}/id/src/${variantName}/"
        rename { filename -> "google-services.json" }
    }
}

copyGoogleServicesJsonTask("debug", getDevProjectId())
copyGoogleServicesJsonTask("release", "simprints-152315")
copyGoogleServicesJsonTask("releaseWithLogfile", "simprints-152315")
copyGoogleServicesJsonTask("endToEndTesting", "simprints-testing")

crashlytics {
    enableNdk true
    androidNdkOut "src/main/obj"
    androidNdkLibsOut "src/main/libs"
}

apply plugin: "com.google.gms.google-services"
