apply plugin: "com.android.application"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion config.min_sdk
        targetSdkVersion 29
        vectorDrawables.useSupportLibrary = true
        versionName "2020.2.0"
        versionCode 222
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    signingConfigs {
        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            lintOptions {
                // TODO : Remove whenever possible
                // Check in the Translations Editor for crucial translations that may be missing
                abortOnError true
                fatal 'StopShip'
                checkReleaseBuilds true
            }
            minifyEnabled true
            ext.enableCrashlytics = true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [firebase_performance_logcat_enabled: false, firebase_analytics_collection_enabled: true]
            signingConfig signingConfigs.release
        }
        releaseWithLogfile {
            initWith release
        }
        debug {
            minifyEnabled false
            ext.enableCrashlytics = false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            versionNameSuffix "-dev"
            manifestPlaceholders = [firebase_performance_logcat_enabled: true, firebase_analytics_collection_enabled: true]
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release" ||
            variant.buildType.name == "releaseWithLogfile") {
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyDdGdHCjfLY6z3zZSBrSHvjvNjh6K6Dhmw\"")
        } else if (variant.buildType.name == "debug") {
            buildConfigField("String", "ANDROID_AUTH_API_KEY", "\"AIzaSyCxPFr61OtOyAsVoXKSSSBo-C4Jk1QHc7I\"")
        }
    }

    sourceSets {
        String sharedTestDir = 'src/commontesttools/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest.java.srcDir sharedTestDir
        androidTest.java.srcDir 'src/androidTest/java'
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    // Required for deps that use Java 8 (okhttp)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    dynamicFeatures = [":fingerprint", ":face", ":clientapi"]
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://maven.google.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    maven {
        url "http://178.62.61.39:8081/artifactory/libs-release-local"
        credentials {
            username = "${SIMPRINTS_ARTIFACTORY_USERNAME}"
            password = "${SIMPRINTS_ARTIFACTORY_PASSWORD}"
        }
    }
}

dependencies {
    // ######################################################
    //                      Deps
    // ######################################################

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':core')
    implementation project(':fingerprintscanner')
    api project(':moduleapi')

    implementation deps.dagger.core
    implementation deps.kotlin.reflect
    implementation deps.kotlin.anko
    implementation deps.androidx.legacy
    implementation deps.androidx.room.core
    implementation deps.androidx.room.coroutines
    implementation deps.androidx.ui.cardview
    implementation deps.androidx.ui.preference
    implementation deps.androidx.ui.fragment
    implementation deps.androidx.security
    implementation deps.androidx.camerax.camera2
    implementation deps.androidx.camerax.lifecycle
    implementation deps.androidx.camerax.view
    implementation deps.support.material
    implementation deps.arch_components.work
    implementation deps.playservices.location
    implementation deps.playservices.places
    implementation deps.playservices.safetynet
    implementation deps.retrofit.core
    implementation deps.retrofit.adapter
    implementation deps.retrofit.convertergson
    implementation deps.retrofit.logging
    implementation deps.retrofit.okhttp
    implementation deps.rxjava2.android
    implementation deps.rxjava2.core
    implementation deps.rxjava2.kotlin
    kapt deps.androidx.lifecycle.compiler
    kapt deps.androidx.room.compiler
    kapt deps.dagger.compiler
    implementation deps.koin.android
    implementation deps.fuzzywuzzy.core
    implementation deps.rxjava2.tasks

    // RootBeer (root detection)
    implementation deps.rootbeer.core

    // Shared
    api deps.firebase.core
    api deps.firebase.auth
    api deps.firebase.config
    api deps.firebase.perf
    api deps.firebase.storage
    api deps.firebase.mlkit
    api deps.firebase.mlkit_barcode
    api deps.firebase.crashlytics
    api deps.gson.core
    api deps.timber.core
    api deps.androidx.core
    api deps.androidx.multidex
    api deps.androidx.appcompat
    api deps.androidx.lifecycle.ktx
    api deps.androidx.lifecycle.ext
    api deps.androidx.lifecycle.livedata
    api deps.androidx.lifecycle.viewmodel
    api deps.androidx.lifecycle.scope
    api deps.androidx.ui.constraintlayout
    api deps.androidx.navigation.dynamicfeatures
    api deps.androidx.navigation.fragment
    api deps.androidx.navigation.ui
    api deps.kotlin.coroutines_android
    api deps.kotlin.coroutines_play_services
    api deps.androidx.camerax.core
    api deps.koin.core
    api deps.koin.android
    api deps.koin.viewmodel

    // ######################################################
    //                      Unit test
    // ######################################################

    testImplementation project(':fingerprintscannermock')
    testImplementation deps.testing.retrofit
    testImplementation(deps.testing.junit) {
        exclude group: "com.android.support"
    }
    testImplementation deps.testing.robolectric.core
    testImplementation deps.testing.robolectric.multidex
    testImplementation deps.testing.androidx.ext_junit
    testImplementation deps.testing.androidx.core
    testImplementation deps.testing.androidx.core_testing
    testImplementation deps.testing.androidx.runner
    testImplementation deps.testing.androidx.room
    testImplementation deps.testing.androidx.rules
    testImplementation deps.testing.espresso.core
    testImplementation deps.testing.espresso.intents
    testImplementation deps.testing.espresso.contrib
    testImplementation deps.testing.truth
    testImplementation deps.testing.kotlin

    testImplementation deps.testing.mockk.core
    testImplementation(deps.testing.koin)

    testImplementation deps.testing.mockwebserver
    testImplementation deps.testing.work
    testImplementation deps.testing.coroutines_test
    kaptTest deps.dagger.compiler
    testImplementation(project(':testtools')) {
        exclude group: 'org.mockito:mockito-android'
    }

    // ######################################################
    //                      Android test
    // ######################################################

    androidTestImplementation(project(':fingerprintscannermock')) {
        exclude group: 'org.apache.maven'
        exclude group: 'org.mockito'
        exclude group: 'org.robolectric'
    }
    androidTestImplementation deps.testing.mockito.core
    androidTestImplementation deps.testing.mockito.android
    androidTestImplementation deps.testing.mockito.kotlin
    androidTestImplementation deps.testing.retrofit
    androidTestImplementation deps.testing.androidx.core_testing
    androidTestImplementation deps.testing.androidx.monitor
    androidTestImplementation deps.testing.androidx.core
    androidTestUtil deps.testing.androidx.orchestrator
    androidTestImplementation deps.testing.androidx.ext_junit
    androidTestImplementation deps.testing.androidx.runner
    androidTestImplementation deps.testing.androidx.rules
    androidTestImplementation deps.testing.work
    androidTestImplementation deps.testing.espresso.core
    androidTestImplementation deps.testing.espresso.intents
    androidTestImplementation deps.testing.truth
    androidTestImplementation deps.testing.rx2_idler
    androidTestImplementation deps.testing.mockk.core
    androidTestImplementation deps.testing.mockk.android
    androidTestImplementation deps.testing.mockwebserver
    androidTestImplementation deps.testing.coroutines_test

    androidTestImplementation(deps.testing.awaitility) {
        exclude group: "org.hamcrest"
    }

    androidTestImplementation(deps.testing.espresso.barista) {
        exclude group: "com.android.support"
        exclude group: "com.google.code.findbugs"
        exclude group: "org.jetbrains.kotlin"
        exclude group: "com.google.guava"
    }
    kaptAndroidTest deps.dagger.compiler
    androidTestImplementation(project(':testtools')) {
        exclude group: 'org.apache.maven'
        exclude group: 'org.mockito'
        exclude group: 'org.robolectric'
        exclude group: 'org.jetbrains.kotlinx'
    }
    androidTestImplementation deps.testing.kappuccino

}

kapt {
    arguments {
        arg("realm.ignoreKotlinNullability", true)
    }
}

apply plugin: "com.google.gms.google-services"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
}
